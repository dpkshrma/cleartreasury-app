name: build

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2.1.2
        with:
          node-version: "14"
          registry-url: "https://npm.pkg.github.com"

      - name: cache npm
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      # Skip post-install scripts here, as a malicious
      # script could steal NODE_AUTH_TOKEN.
      - name: Install app dependencies (without scripts)
        run: npm i -g npm@7 && npm install --ignore-scripts
        env:
          # See https://github.com/actions/setup-node/issues/49#issuecomment-818681403
          NODE_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: Run post-install scripts
        run: npm rebuild && npm run prepare --if-present

      - name: Install infra dependencies
        run: cd infra && npm install

      - uses: clear-treasury/github-actions/action-gardener@latest

      - name: Define branches we're juggling to build
        uses: actions/github-script@v4
        id: branches
        with:
          script: |
            const refParts = context.ref.split('/');
            const shortRef = refParts.slice(2).join('/');
            core.exportVariable('BRANCH', shortRef);
            core.setOutput('branch', shortRef);
          result-encoding: string

      - name: Set environment variables
        run: |
          if [[ ${{ steps.branches.outputs.branch }} == 'main' ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=${{ secrets.PROD_AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=${{ secrets.NONPROD_AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy
        env:
          NEXT_PUBLIC_CMS_PROJECT_ID: ${{ secrets.CMS_PROJECT_ID }}
          NEXT_PUBLIC_CMS_DATASET:
            "${{ steps.branches.outputs.branch == 'main' &&
            secrets.PROD_CMS_DATASET || secrets.NONPROD_CMS_DATASET }}"
          NEXT_PUBLIC_GA_ID:
            "${{ steps.branches.outputs.branch == 'main' && secrets.PROD_GA_ID
            || secrets.NONPROD_GA_ID }}"
          NODE_OPTIONS: '--max_old_space_size=4096'
        run: |
          cd infra && \
          npx cdk bootstrap && \
          npx cdk deploy --require-approval=never -c branch="${BRANCH}" -c stack_name="${BRANCH}-${{ github.event.repository.id }}" -c stack_description="${{ github.event.repository.html_url }}/tree/${BRANCH}" PaymentsPlatformWebAppStack
          npx cdk deploy --require-approval=never -c branch="${BRANCH}" -c stack_name="${BRANCH}-${{ github.event.repository.id }}" -c stack_description="${{ github.event.repository.html_url }}/tree/${BRANCH}" --all
